name: Auto PR, Validate, and Merge

on:
  push:
    branches-ignore:
      - main

  pull_request:
    types: [opened, synchronize, reopened, labeled, ready_for_review]

permissions:
  contents: read

jobs:
  create-pr:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    permissions:
      pull-requests: write
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create PR if not exists
        run: |
          echo "Checking for existing PR for branch ${{ github.ref_name }}..."
          PR_EXISTS=$(gh pr view "${{ github.ref_name }}" --json id -q '.id' 2>/dev/null || echo "")
          if [ -z "$PR_EXISTS" ]; then
            echo "Creating PR for branch ${{ github.ref_name }} against main..."
            gh pr create \
              --title "Auto PR: ${{ github.ref_name }}" \
              --body "Automatically created PR for branch ${{ github.ref_name }}" \
              --base main \
              --head "${{ github.ref_name }}" \
              --label "automerge"
          else
            echo "PR already exists"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: read
      pull-requests: write
    outputs:
      validation-passed: ${{ steps.validation.outputs.result }}
      errors: ${{ steps.validation.outputs.errors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install pyyaml

      - name: Validate repository
        id: validation
        continue-on-error: true
        run: |
          echo "üîç Running repository validation..."
          ERRORS=$(python .github/scripts/validate_index.py)
          PY_EXIT=$?
          echo "errors<<EOF" >> $GITHUB_OUTPUT
          echo "$ERRORS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          if [ $PY_EXIT -eq 0 ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Post validation errors to PR
        if: ${{ steps.validation.outputs.result == 'false' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ‚ö†Ô∏è **Validation failed for this PR** ‚ö†Ô∏è

            ```text
            ${{ steps.validation.outputs.errors }}
            ```

  auto-merge:
    needs: validate
    if: ${{ needs.validate.outputs.validation-passed == 'true' && contains(github.event.pull_request.labels.*.name, 'automerge') && github.event.pull_request.draft == false && !github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Auto merge pull request
        run: |
          echo "üöÄ Merging PR #${{ github.event.pull_request.number }}..."
          gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch
          echo "‚úÖ Successfully merged PR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs: auto-merge
    if: ${{ needs.auto-merge.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Delete merged branch
        run: |
          if [ "${{ github.event.pull_request.head.ref }}" != "main" ]; then
            echo "üßπ Cleaning up merged branch: ${{ github.event.pull_request.head.ref }}"
            gh api repos/${{ github.repository }}/git/refs/heads/"${{ github.event.pull_request.head.ref }}" -X DELETE || echo "Branch already deleted or deletion not permitted"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
