name: Agents Validation, PR, and Auto-merge

on:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled, ready_for_review]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate_on_branch:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip pyyaml

      - name: Run validator
        id: validate
        run: python .github/validators/validate_index.py

      - name: Create or update PR with labels
        id: open_pr
        if: success() && steps.validate.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = context.ref.replace('refs/heads/','');
            if (head === 'main') {
              core.info('Skipping PR for main branch');
              return;
            }
            // Find existing PR from this branch
            const prs = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, per_page: 1
            });
            let number = prs.data.length ? prs.data[0].number : null;
            if (!number) {
              const pr = await github.rest.pulls.create({
                owner, repo, base: 'main', head,
                title: `Auto PR: ${head}`,
                body: `Auto-created PR for branch ${head}.`
              });
              number = pr.data.number;
            }
            await github.rest.issues.addLabels({
              owner, repo, issue_number: number, labels: ['auto-validated', 'automerge']
            });
            core.setOutput('number', String(number));
            core.info(`PR #${number} labeled and ready`);

      - name: Auto-merge PR after validation
        id: auto_merge
        if: success() && steps.validate.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = context.ref.replace('refs/heads/','');
            if (head === 'main') {
              core.info('Skipping auto-merge for main branch');
              return;
            }

            // Find the PR for this branch
            const prs = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, per_page: 1
            });

            if (prs.data.length === 0) {
              core.info('No PR found for this branch');
              return;
            }

            const number = prs.data[0].number;
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });

            if (pr.state !== 'open' || pr.draft) {
              core.info('PR not ready to merge');
              return;
            }

            const res = await github.rest.pulls.merge({ owner, repo, pull_number: number, merge_method: 'squash' });
            if (!res.data.merged) {
              core.setFailed(`Merge failed: ${res.data.message}`);
              return;
            }

            try {
              await github.rest.git.deleteRef({ owner, repo, ref: `heads/${head}` });
            } catch (e) {
              core.info(`Branch delete failed (non-blocking): ${e.message}`);
            }

            core.info(`Successfully merged PR #${number} and cleaned up branch ${head}`);
  validate_pr:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      (github.event.action == 'opened' ||
       github.event.action == 'reopened' ||
       github.event.action == 'synchronize')
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout PR merge commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip pyyaml

      - name: Run validator
        id: validate
        run: python .github/validators/validate_index.py

  auto_merge:
    needs: validate_pr
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'automerge') &&
      contains(github.event.pull_request.labels.*.name, 'auto-validated') &&
      github.event.pull_request.draft == false &&
      github.event.pull_request.merged == false
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Merge PR via API
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const number = context.payload.pull_request.number;

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
            if (pr.state !== 'open' || pr.draft) {
              core.setFailed('PR not ready to merge');
              return;
            }

            const res = await github.rest.pulls.merge({ owner, repo, pull_number: number, merge_method: 'squash' });
            if (!res.data.merged) {
              core.setFailed(`Merge failed: ${res.data.message}`);
              return;
            }

            try {
              await github.rest.git.deleteRef({ owner, repo, ref: `heads/${pr.head.ref}` });
            } catch (e) {
              core.info(`Branch delete failed (non-blocking): ${e.message}`);
            }
