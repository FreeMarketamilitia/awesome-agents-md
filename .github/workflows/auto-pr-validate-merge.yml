name: Auto Validate, Create PR, and Merge

on:
  create:
    branches: ["*"]
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled, ready_for_review]

permissions:
  contents: read

jobs:
  validate-branch-changes:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'create' }}
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install pyyaml
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate branch (only changed files)
        id: validation
        continue-on-error: true
        run: |
          echo "🔍 Running validation for changes in ${{ github.ref_name }}..."
          echo "📋 Environment details:"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - SHA: ${{ github.sha }}"
          echo "  - Event: ${{ github.event_name }}"
          echo "  - Working directory: $(pwd)"
          echo "  - Python version: $(python --version)"

          echo "📂 Repository contents:"
          ls -la | head -20

          echo "📊 Git status:"
          git status --porcelain

          echo "🔀 Changes since main:"
          git diff --name-only origin/main...HEAD || echo "Could not compare with origin/main"

          echo "🐍 Running validation script..."
          # Run validation with detailed error capture
          set +e  # Don't exit on error yet
          ERRORS_JSON=$(python -u .github/scripts/validate_index.py 2>&1)
          PY_EXIT_CODE=$?
          set -e  # Restore exit on error

          echo "📋 Validation script output:"
          echo "$ERRORS_JSON"
          echo ""
          echo "🔍 Validation exit code: $PY_EXIT_CODE"
          echo "🐛 Debug: ERRORS_JSON length: $(echo "$ERRORS_JSON" | wc -c)"
          echo "🐛 Debug: ERRORS_JSON starts with '[': $(echo "$ERRORS_JSON" | head -c1)"

          if [ "$ERRORS_JSON" != "[]" ] && [ -n "$ERRORS_JSON" ]; then
            ERRORS_FORMATTED=$(echo "$ERRORS_JSON" | jq -r '.[] | "- \(.)" 2>/dev/null || echo "❌ JSON parsing failed or no errors found"')
            if [ "$ERRORS_FORMATTED" = "❌ JSON parsing failed or no errors found" ]; then
              echo "⚠️  Warning: Could not parse validation output as JSON"
              ERRORS_FORMATTED="❌ Validation failed (non-JSON output): $ERRORS_JSON"
            fi
          else
            ERRORS_FORMATTED="✅ Validation passed - all changes are valid."
          fi

          echo "📋 Final validation result:"
          echo "$ERRORS_FORMATTED"

          # Add debug information
          echo "🔧 Debug information:" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Exit code: $PY_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
          echo "- Raw output length: $(echo "$ERRORS_JSON" | wc -c)" >> $GITHUB_STEP_SUMMARY

          echo "errors<<EOF" >> $GITHUB_OUTPUT
          echo "$ERRORS_FORMATTED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ $PY_EXIT_CODE -eq 0 ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
            # Save debug logs as artifacts for failed validations
            echo "Saving debug logs for failed validation..." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set commit status
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ steps.validation.outputs.result }}' === 'true' ? 'success' : 'failure';
            const description = '${{ steps.validation.outputs.result }}' === 'true' ?
              'Validation successful ✅' : 'Validation failed ❌';

            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              description: description,
              context: 'validation'
            });

      - name: Create PR if validation passed
        id: pr-create
        if: steps.validation.outputs.result == 'true'
        run: |
          echo "✅ Validation passed! Checking for existing PR..."

          # Check if PR already exists
          PR_EXISTS=$(gh pr list --head ${{ github.ref_name }} --base main --state open --json number --jq '.[0].number // empty')
          if [ -z "$PR_EXISTS" ]; then
            echo "Creating new PR..."
            PR_TITLE="Auto PR: ${{ github.ref_name }}"
            PR_BODY="Automatically created PR for branch ${{ github.ref_name }}

          ### Validation Results
          ✅ **All validation checks passed**

          **Changes in this branch:**
          $(git log --oneline origin/main..HEAD)

          This PR is ready for automatic merge once labeled with \`automerge\`."

            echo "Creating PR..."
            PR_NUMBER=$(gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --base main \
              --head ${{ github.ref_name }} \
              --label "auto-validated" \
              --json number --jq '.number')

            echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "Created PR #$PR_NUMBER"
          else
            echo "PR already exists (#$PR_EXISTS) - adding validation labels..."
            gh pr edit $PR_EXISTS --add-label "auto-validated"
            echo "pr-number=$PR_EXISTS" >> $GITHUB_OUTPUT
            echo "Updated existing PR #$PR_EXISTS"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create issue for validation failure
        if: steps.validation.outputs.result == 'false'
        run: |
          echo "❌ Validation failed. Creating tracking issue..."

          ISSUE_TITLE="Validation Failed: ${{ github.ref_name }}"
          ISSUE_BODY="Branch **${{ github.ref_name }}** failed repository validation.

          ### Validation Errors:
          \`\`\`text
          ${{ steps.validation.outputs.errors }}
          \`\`\`

          ### Next Steps:
          1. Fix the validation errors above
          2. Commit and push your changes
          3. The workflow will automatically retry validation
          4. Once validation passes, a PR will be created automatically

          Branch: \`${{ github.ref_name }}\`
          Commit: \`${{ github.sha }}\`"

          echo "Creating validation failure issue..."
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "validation-failed" \
            --assignee ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-pull-request:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install pyyaml

      - name: Validate PR changes
        id: pr-validation
        continue-on-error: true
        run: |
          echo "🔍 Validating PR #${{ github.event.pull_request.number }}..."
          echo "📋 PR Validation Details:"
          echo "  - PR Number: ${{ github.event.pull_request.number }}"
          echo "  - PR Title: ${{ github.event.pull_request.title }}"
          echo "  - Branch: ${{ github.event.pull_request.head.ref }}"
          echo "  - Base: ${{ github.event.pull_request.base.ref }}"
          echo "  - SHA: ${{ github.event.pull_request.head.sha }}"
          echo "  - Working directory: $(pwd)"

          echo "📂 Current branch info:"
          git branch --show-current

          echo "🔀 Switching to PR branch..."
          git checkout ${{ github.event.pull_request.head.sha }}

          echo "📊 Files changed in PR:"
          git diff --name-only HEAD~1 2>/dev/null || git diff --name-only ${{ github.event.pull_request.base.sha }}...'${{ github.event.pull_request.head.sha }}' || echo "Could not show changed files"

          echo "🐍 Running validation script for PR..."
          # Run validation with detailed error capture
          set +e  # Don't exit on error yet
          ERRORS_JSON=$(python -u .github/scripts/validate_index.py 2>&1)
          PY_EXIT_CODE=$?
          set -e  # Restore exit on error

          echo "📋 PR Validation script output:"
          echo "$ERRORS_JSON"
          echo ""
          echo "🔍 PR Validation exit code: $PY_EXIT_CODE"
          echo "🐛 Debug: ERRORS_JSON type check: $(echo "$ERRORS_JSON" | head -c10)"

          if [ "$ERRORS_JSON" != "[]" ] && [ -n "$ERRORS_JSON" ]; then
            ERRORS_FORMATTED=$(echo "$ERRORS_JSON" | jq -r '.[] | "- \(.)" 2>/dev/null || echo "❌ JSON parsing failed or no errors found"')
            if [ "$ERRORS_FORMATTED" = "❌ JSON parsing failed or no errors found" ]; then
              echo "⚠️  Warning: Could not parse PR validation output as JSON"
              ERRORS_FORMATTED="❌ PR Validation failed (non-JSON output): $ERRORS_JSON"
            fi
          else
            ERRORS_FORMATTED="✅ All PR validation checks passed!"
          fi

          echo "📋 Final PR validation result:"
          echo "$ERRORS_FORMATTED"

          # Add debug information to step summary
          echo "## PR Validation Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "- PR: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.event.pull_request.head.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Exit code: $PY_EXIT_CODE" >> $GITHUB_STEP_SUMMARY
          echo "- Output length: $(echo "$ERRORS_JSON" | wc -c)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Raw Output:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$ERRORS_JSON" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "errors<<EOF" >> $GITHUB_OUTPUT
          echo "$ERRORS_FORMATTED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ $PY_EXIT_CODE -ne 0 ]; then
            echo "result=false" >> $GITHUB_OUTPUT
          else
            echo "result=true" >> $GITHUB_OUTPUT
          fi

      - name: Post validation results to PR
        if: steps.pr-validation.outputs.result == 'true'
        run: |
          COMMENT_BODY="✅ **Validation successful!**

          $ERRORS_JSON

          This PR is ready for review and merge.
          - Add \`automerge\` label to trigger automatic merging"

          echo "Posting success comment..."
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post validation errors to PR (fail workflow if needed)
        if: steps.pr-validation.outputs.result == 'false'
        run: |
          COMMENT_BODY="⚠️ **Validation failed** ⚠️

          Please address the following validation errors:
          \`\`\`markdown
          ${{ steps.pr-validation.outputs.errors }}
          \`\`\`

          After fixing these issues, push your changes to retrigger validation."

          echo "Posting validation failure comment..."
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
          exit 1  # Fail the workflow to block merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-approved-prs:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'automerge') &&
      contains(github.event.pull_request.labels.*.name, 'auto-validated') &&
      github.event.pull_request.draft == false &&
      github.event.pull_request.merged == false
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for required checks
        run: |
          echo "🔄 Waiting for status checks to complete..."
          # Give other jobs time to complete
          sleep 10

      - name: Auto merge pull request
        run: |
          echo "🚀 Merging PR #${{ github.event.pull_request.number }} (${{ github.event.pull_request.title }})..."

          # Ensure PR is still open and ready
          PR_STATE=$(gh pr view ${{ github.event.pull_request.number }} --json state,isDraft --jq 'if .state == "OPEN" and .isDraft == false then "ready" else "not-ready" end')

          if [ "$PR_STATE" = "ready" ]; then
            echo "✅ PR is ready for merge, proceeding..."
            gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch
            echo "✨ Successfully merged PR and deleted branch '${{ github.event.pull_request.headRef.name }}'"
          else
            echo "❌ PR is not ready for merge ($PR_STATE), skipping..."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
