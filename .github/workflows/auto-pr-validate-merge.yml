name: Agents Validation, PR, and Auto-merge

on:
  create:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled, ready_for_review]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate_on_branch:
    if: github.event_name == 'push' || (github.event_name == 'create' && github.event.ref_type == 'branch')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip pyyaml

      - name: Run validator
        id: validate
        run: python .github/validators/validate_index.py

      - name: Create or update PR with labels
        id: open_pr
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = context.ref.replace('refs/heads/','');
            if (head === 'main') {
              core.info('Skipping PR for main branch');
              return;
            }
            // Find existing PR from this branch
            const prs = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`, per_page: 1
            });
            let number = prs.data.length ? prs.data[0].number : null;
            if (!number) {
              const pr = await github.rest.pulls.create({
                owner, repo, base: 'main', head,
                title: `Auto PR: ${head}`,
                body: `Auto-created PR for branch ${head}.`
              });
              number = pr.data.number;
            }
            await github.rest.issues.addLabels({
              owner, repo, issue_number: number, labels: ['auto-validated', 'automerge']
            });
            core.setOutput('number', String(number));
            core.info(`PR #${number} labeled and ready`);
      
      - name: Auto-merge PR after branch validation
        if: success() && (github.event_name == 'push' || github.event_name == 'create')
        uses: actions/github-script@v6
        env:
          PR_NUMBER: ${{ steps.open_pr.outputs.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = context.ref.replace('refs/heads/','');
            if (head === 'main') {
              core.info('Skipping merge for main branch');
              return;
            }
            async function findPr() {
              const n = process.env.PR_NUMBER && process.env.PR_NUMBER !== 'null' ? Number(process.env.PR_NUMBER) : null;
              if (n) {
                try {
                  const { data } = await github.rest.pulls.get({ owner, repo, pull_number: n });
                  return data.state === 'open' ? data : null;
                } catch {}
              }
              const prs = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${head}`, per_page: 1 });
              return prs.data[0] || null;
            }
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));
            let pr = null;
            for (let i = 0; i < 12; i++) { // up to ~60s
              pr = await findPr();
              if (pr) break;
              core.info('Waiting for PR to be available...');
              await sleep(5000);
            }
            if (!pr) {
              core.info('No open PR found to merge');
              return;
            }
            const labelNames = pr.labels.map(l => typeof l === 'string' ? l : l.name);
            const needLabels = [];
            if (!labelNames.includes('automerge')) needLabels.push('automerge');
            if (!labelNames.includes('auto-validated')) needLabels.push('auto-validated');
            if (needLabels.length) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: pr.number, labels: needLabels });
            }
            if (pr.draft || pr.merged) {
              core.info('PR is draft or already merged; skipping merge');
              return;
            }
            // refresh mergeability
            for (let i = 0; i < 6; i++) {
              const { data } = await github.rest.pulls.get({ owner, repo, pull_number: pr.number });
              if (data.mergeable !== null && data.mergeable_state && data.mergeable_state !== 'unknown') {
                pr = data;
                break;
              }
              await sleep(3000);
            }
            try {
              const res = await github.rest.pulls.merge({ owner, repo, pull_number: pr.number, merge_method: 'squash' });
              if (!res.data.merged) {
                core.setFailed(`Merge failed: ${res.data.message}`);
                return;
              }
              try {
                await github.rest.git.deleteRef({ owner, repo, ref: `heads/${head}` });
              } catch (e) {
                core.info(`Branch delete failed (non-blocking): ${e.message}`);
              }
            } catch (e) {
              core.setFailed(`Merge API error: ${e.message}`);
            }
  validate_pr:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      (github.event.action == 'opened' ||
       github.event.action == 'reopened' ||
       github.event.action == 'synchronize')
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip pyyaml

      - name: Run validator
        run: python .github/validators/validate_index.py

  auto_merge:
    needs: validate_pr
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' &&
      contains(github.event.pull_request.labels.*.name, 'automerge') &&
      contains(github.event.pull_request.labels.*.name, 'auto-validated') &&
      github.event.pull_request.draft == false &&
      github.event.pull_request.merged == false
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Merge PR via API
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const number = context.payload.pull_request.number;

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
            if (pr.state !== 'open' || pr.draft) {
              core.setFailed('PR not ready to merge');
              return;
            }

            const res = await github.rest.pulls.merge({ owner, repo, pull_number: number, merge_method: 'squash' });
            if (!res.data.merged) {
              core.setFailed(`Merge failed: ${res.data.message}`);
              return;
            }

            try {
              await github.rest.git.deleteRef({ owner, repo, ref: `heads/${pr.head.ref}` });
            } catch (e) {
              core.info(`Branch delete failed (non-blocking): ${e.message}`);
            }
