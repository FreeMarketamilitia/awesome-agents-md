name: Auto PR, Validate, and Merge

on:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled, ready_for_review]

jobs:
  create-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create PR if not exists
        run: |
          echo "Checking for existing PR for branch ${{ github.ref_name }}..."
          # The GH CLI command will exit with a non-zero status if no PR is found.
          if ! gh pr view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "Creating PR for branch ${{ github.ref_name }} against main..."
            gh pr create \
              --title "Auto PR: ${{ github.ref_name }}" \
              --body "Automatically created PR for branch ${{ github.ref_name }}" \
              --base main \
              --head ${{ github.ref_name }} \
              --label "automerge"
          else
            echo "PR already exists for branch ${{ github.ref_name }}."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate:
    runs-on: ubuntu-latest
    # This job should only run on PRs.
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      # Write permission is needed to post comments on the PR.
      pull-requests: write
    outputs:
      validation-passed: ${{ steps.validation.outputs.result }}
      errors: ${{ steps.validation.outputs.errors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all branches and tags for the validation script to work correctly.
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install pyyaml
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate repository
        id: validation
        # Continue even if the script fails, so we can post the errors.
        continue-on-error: true
        run: |
          echo "üîç Running repository validation..."
          # The script outputs a JSON array of errors.
          # We capture the exit code to determine success/failure.
          ERRORS_JSON=$(python .github/scripts/validate_index.py)
          PY_EXIT_CODE=$?

          # Format errors into a markdown list for better readability in PR comments.
          # The script returns '[]' on success.
          if [ "$ERRORS_JSON" != "[]" ] && [ -n "$ERRORS_JSON" ]; then
            ERRORS_FORMATTED=$(echo "$ERRORS_JSON" | jq -r '.[] | "- \(.)"')
          else
            ERRORS_FORMATTED="Validation passed."
          fi

          echo "Formatted Errors:"
          echo "$ERRORS_FORMATTED"

          # Set the outputs for subsequent steps.
          # Use a heredoc to handle multi-line error strings correctly.
          echo "errors<<EOF" >> $GITHUB_OUTPUT
          echo "$ERRORS_FORMATTED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ $PY_EXIT_CODE -eq 0 ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Post validation errors to PR
        # This step runs only if the validation script returned a non-zero exit code.
        if: steps.validation.outputs.result == 'false'
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ‚ö†Ô∏è **Validation failed for this PR** ‚ö†Ô∏è

            Please address the following issues:
            ```markdown
            ${{ steps.validation.outputs.errors }}
            ```

  auto-merge:
    needs: validate
    if: |
      github.event_name == 'pull_request' &&
      needs.validate.outputs.validation-passed == 'true' &&
      contains(github.event.pull_request.labels.*.name, 'automerge') &&
      github.event.pull_request.draft == false &&
      !github.event.pull_request.merged
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Auto merge pull request
        run: |
          echo "üöÄ Merging PR #${{ github.event.pull_request.number }}..."
          gh pr merge ${{ github.event.pull_request.number }} --squash --delete-branch
          echo "‚úÖ Successfully merged PR and deleted branch."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
